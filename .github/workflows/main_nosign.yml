name: Build kernels 2

on:
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    steps:
      - name: Set swap to 20G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 20
          
      - name: build
        run: |
          
          # 确保系统是最新的
          cd ~
          sudo apt update

          # 安装必要的依赖
          sudo apt install -y curl axel git build-essential flex bison libssl-dev \
              libncurses5-dev libelf-dev bc python3 rsync file
          axel https://raw.githubusercontent.com/mingmingzhichu/build/refs/heads/main/AnyKernel3-master.zip

          # 安装 aarch64 和 arm32 交叉编译工具链
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
              gcc-arm-linux-gnueabi g++-arm-linux-gnueabi

          # 克隆内核源码和 Clang 工具链
          git clone https://github.com/yaap/kernel_oneplus_sm8150.git -b sixteen kernel --depth=1
          git clone https://gitlab.com/crdroidandroid/android_prebuilts_clang_host_linux-x86_clang-r536225 clang --depth=1

          # 设置环境变量
          export KBUILD_BUILD_USER=mmzch
          export KBUILD_BUILD_HOST=localhost
          export HOME=~/
          export CLANG_PATH=$HOME/clang/bin
          export PATH="$CLANG_PATH:$PATH"
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export ARCH=arm64
          export SUBARCH=arm64
          export LLVM=1
          export LLVM_IAS=1

          # 进入内核目录并应用补丁
          cd kernel
          axel https://raw.githubusercontent.com/mingmingzhichu/build/refs/heads/main/su.patch
          axel https://raw.githubusercontent.com/mingmingzhichu/build/refs/heads/main/kpm.patch
          patch -p1 < kpm.patch
          patch -p1 < su.patch
          # 配置内核选项
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_KALLSYMS_BASE_RELATIVE is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_KSU=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_KALLSYMS=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_KALLSYMS_ALL=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_KSU=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_KALLSYMS=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_KALLSYMS_ALL=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_DEBUG_INFO=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_DEBUG_KERNEL=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_STRIP_ASM_SYMS is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "CONFIG_LTO_NONE=y" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_LTO is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_THINLTO is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_LLVM_POLLY is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_LTO_CLANG is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_ARCH_SUPPORTS_LTO_CLANG is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_ARCH_SUPPORTS_THINLTO is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          echo "# CONFIG_RELR is not set" >> ~/kernel/arch/arm64/configs/gulch_defconfig
          # 集成 KernelSU
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s nongki

          # 修复 LZ4 函数名不一致问题
          sed -i 's/LZ4_armv8_decompress_safe/LZ4_arm64_decompress_safe/g' lib/lz4/lz4_decompress.c
          sed -i 's/LZ4_armv8_decompress_safe_partial/LZ4_arm64_decompress_safe_partial/g' lib/lz4/lz4_decompress.c

          # 清理并配置内核
          make O=../out ARCH=arm64 gulch_defconfig

          # 使用 Clang 编译内核
          make -j$(nproc --all) O=../out ARCH=arm64 \
              CC=clang \
              LD=ld.lld \
              AR=llvm-ar \
              NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              STRIP=llvm-strip \
              CROSS_COMPILE=aarch64-linux-gnu- \
              CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
              LLVM=1 \
              LLVM_IAS=1 \
              KCFLAGS="-fno-lto"

          cd ~
 
          unzip ~/AnyKernel3-master.zip -d ~/AnyKernel3-master
          cp ~/out/.config ~/AnyKernel3-master/config
          cp ~/out/arch/arm64/boot/Image ~/AnyKernel3-master/Image
          aarch64-linux-gnu-objdump -t ~/out/arch/arm64/boot/Image | grep kallsyms_names

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-nosig
          path: ~/AnyKernel3-master/
