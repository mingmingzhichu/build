name: Compile SM8150 Mainline Kernel (hotdogb)

on:
  workflow_dispatch:  # Only manual trigger

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git build-essential bc bison flex libssl-dev \
          gcc-aarch64-linux-gnu device-tree-compiler \
          python3-pip cpio gzip liblz4-tool busybox-static

    - name: Clone kernel source
      run: |
        git clone https://gitlab.com/sm8150-mainline/linux.git -b sm8150/6.14

    - name: Set up environment
      run: |
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV

    - name: Configure kernel (sm8150 + hardening)
      working-directory: linux
      run: |
        mkdir -p out
        make O=out defconfig sm8150.config
        
    - name: Build kernel
      working-directory: linux
      run: make O=out -j$(nproc) Image.gz dtbs modules

    - name: Install modules
      working-directory: linux
      run: make O=out modules_install INSTALL_MOD_PATH=modules_dir INSTALL_MOD_STRIP=1

    - name: Create initramfs
      working-directory: linux
      run: |
        mkdir -p initramfs/{bin,sbin,proc,sys,dev,etc}
        cp /bin/busybox initramfs/bin/
        cd initramfs
        ./bin/busybox --install -s .
        echo '/bin/sh' > etc/inittab
        find . | cpio -o -H newc | gzip > ../base-initramfs.cpio.gz
        cd ..

        if [ -d modules_dir ]; then
          echo "Adding kernel modules to initramfs"
          (cd modules_dir && find . | cpio -o -H newc | gzip -9 > modules.cpio.gz)
          cat base-initramfs.cpio.gz modules.cpio.gz > final-initramfs.cpio.gz
        else
          mv base-initramfs.cpio.gz final-initramfs.cpio.gz
        fi

    - name: Pack boot.img (hotdogb DTB auto-detect)
      working-directory: linux
      run: |
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg

        MKBOOT="python3 mkbootimg/mkbootimg.py"

        # 自动检测 dtb 文件
        DTB_FILE=$(ls out/arch/arm64/boot/dts/qcom/*hotdogb*.dtb 2>/dev/null | head -n1)

        if [ -z "$DTB_FILE" ]; then
          echo "❌ 没有找到 hotdogb dtb，列出目录内容："
          ls -lh out/arch/arm64/boot/dts/qcom/ || true
          exit 1
        fi

        if [ -f "out/arch/arm64/boot/Image.gz-dtb" ]; then
          echo "Using built Image.gz-dtb"
          KERNEL_IMG="out/arch/arm64/boot/Image.gz-dtb"
        else
          echo "Manually concatenating Image.gz + $DTB_FILE"
          cat out/arch/arm64/boot/Image.gz "$DTB_FILE" > Image.gz-dtb
          KERNEL_IMG="Image.gz-dtb"
        fi

        CMDLINE="console=ttyMSM0,115200n8 earlycon=msm_geni_serial,0xc90000 androidboot.hardware=qcom msm_rtb.filter=0x237 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 cma=32M@0-0xffffffff androidboot.configfs=true androidboot.usbcontroller=a600000.dwc3 loop.max_part=7 androidboot.selinux=permissive"

        $MKBOOT --kernel "$KERNEL_IMG" --ramdisk final-initramfs.cpio.gz \
          --cmdline "$CMDLINE" \
          --base 0x80000000 --pagesize 4096 \
          --kernel_offset 0x00008000 \
          --ramdisk_offset 0x01000000 \
          --tags_offset 0x00000100 \
          --output boot.img

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-artifacts-hotdogb
        path: |
          linux/boot.img
          linux/out/arch/arm64/boot/Image.gz
          linux/out/arch/arm64/boot/Image.gz-dtb
          linux/out/arch/arm64/boot/dts/qcom/*.dtb
          linux/out/.config
        retention-days: 30
        if-no-files-found: ignore

    - name: Show build summary
      working-directory: linux
      run: |
        echo "=== Build Summary ==="
        du -h boot.img || echo "boot.img missing"
        du -h out/arch/arm64/boot/Image.gz || true
        ls -lh out/arch/arm64/boot/dts/qcom/ | head -n 20 || true

    - name: Cleanup
      if: always()
      run: rm -rf linux
